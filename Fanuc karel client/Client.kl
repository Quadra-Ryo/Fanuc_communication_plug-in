PROGRAM TCP_Client

------------------------------------ TCP_Client Plug-In ------------------------------------
-- Author: Niccolo' Quadrani
-- Date: 24/04/2025
-- Version: 2.2.4
------------------------------------ TCP_Client Plug-In ------------------------------------


------------------------------------ Import ------------------------------------

%RWACCESS
%STACKSIZE = 4096
%NOLOCKGROUP
%NOBUSYLAMP
%NOPAUSE = ERROR + COMMAND + TPENABLE
%ENVIRONMENT uif
%ENVIRONMENT sysdef
%ENVIRONMENT memo
%ENVIRONMENT kclop
%ENVIRONMENT bynam
%ENVIRONMENT fdev
%ENVIRONMENT flbt
%ENVIRONMENT regope
%ENVIRONMENT strng
%INCLUDE klevccdf
%INCLUDE klevkeys
%INCLUDE klevkmsk

------------------------------------ Variables Declaration ------------------------------------
VAR
    -- File variables (Used as a socket)
    f_socket:                        FILE

    -- Integers Variables
    i_debug:                        INTEGER
    i_status:                       INTEGER
    i_bytes_to_read:                INTEGER

    -- Real Variables
    r_value:                        REAL

    -- Bolean Variables
    b_real_flag:                    BOOLEAN

    -- String variables
    s_received_string:              STRING [64]

    -- Integer Registers
    ir_i_debug_register:            INTEGER

------------------------------------ Debug Routine ------------------------------------

ROUTINE debug(msg:STRING)
VAR
    -- Used to format the debugs
    formatted_msg : STRING[64]

BEGIN
    -- Getting the register value
    GET_REG(ir_i_debug_register, b_real_flag, i_debug, r_value, i_status)

    IF i_status = 0 THEN -- Error check
        IF i_debug <> 0 THEN
            formatted_msg = 'DEBUG: ' + msg
            WRITE (formatted_msg, CR) -- Debugging on the CR
        ENDIF
    ELSE 
        WRITE ('ERROR: Cannot execute GET_REG', CR) -- Printing the error in the CR
    ENDIF

END debug

------------------------------------ MAIN ------------------------------------
BEGIN
    ir_i_debug_register = 1
    SET_REG_CMT (ir_i_debug_register, 'Command', i_status)
    SET_INT_REG (ir_i_debug_register, 0, i_status)

     -- Connecting to the client before doing any client related operation
    MSG_CONNECT('C3:',i_status)
    WHILE i_status <> 0 DO
        CLR_IO_STAT(f_socket) -- Clearing the IO status from older runs
        MSG_DISCO('C3:',i_status) -- Clearing the socket connection
        DELAY(100)
        MSG_CONNECT('C3:',i_status)
    ENDWHILE
    
    OPEN FILE f_socket ('rw','C3:') -- Opening the file using write mode on client 3 
    i_status = IO_STATUS(f_socket) -- Checking the current IO i_status

    WHILE i_status <> 0 DO -- Looping until the socket is open
        CLOSE FILE f_socket -- Closing the file to reset the connection
        DELAY(50) -- Waiting for the connection to be established
        OPEN FILE f_socket ('rw','C3:') -- Opening the file using write mode on client 3
        DELAY(25)
        i_status = IO_STATUS(f_socket) -- Checking the current IO i_status
    ENDWHILE

    -- Cleaning the file buffer
    BYTES_AHEAD(f_socket,i_bytes_to_read,i_status) -- Reading if there are any remained data 
    IF i_bytes_to_read >= 1 THEN
        READ f_socket (s_received_string::i_bytes_to_read)
    ENDIF
    
    debug(s_received_string)
    
END TCP_Client